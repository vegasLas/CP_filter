{"version":3,"sources":["api/API.js","api/PostsAPI.js","redux/posts-reducer.js","selectors/postsSelectors.js","common/Paginator.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["instance","axios","create","withCredentials","baseURL","PostsAPI","get","then","res","data","SET_POSTS","SET_QUEUE","SET_FILTER","SET_CURRENT_PAGE","initialState","posts","filterPosts","currentPage","flatArray","arr","result","forEach","el","Array","isArray","distributorObjectsInArray","count","i","length","push","sortMultiRaising","a","b","title","sortMultiDecrease","actions","type","state","string","getPosts","dispatch","postsReducer","action","copyArray","array","sort","filter","o","match","getPostsSel","getFilterPostsSel","getCurrentPageSel","Paginator","totalItemsCount","portionSize","pagesCount","Math","ceil","useDispatch","useSelector","pages","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","onClick","p","map","cn","e","App","console","log","setCount","setString","postsSel","filterPostsSel","useEffect","value","onChange","preventDefault","target","border","id","pageSize","React","memo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5dc1623e.chunk.js","sourcesContent":["  \r\nimport axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n})\r\n","import {instance} from './API'\r\n\r\n\r\n\r\nexport const PostsAPI = {\r\n    getPosts() {\r\n        return instance.get(`posts`).then(res => res.data)\r\n    },\r\n}\r\n","import { PostsAPI } from \"../api/PostsAPI\"\r\n\r\n\r\nconst SET_POSTS = \"SET__POSTS\"\r\nconst SET_QUEUE = \"SET_QUEUE\"\r\nconst SET_FILTER = \"SET_FILTER\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst initialState = {\r\n    posts: [],\r\n    filterPosts: [],\r\n    currentPage: 1,\r\n}\r\nfunction flatArray(arr) {\r\n    var result = []\r\n    arr.forEach(el => {\r\n        if (Array.isArray(el)) {\r\n            result = [...result, ...flatArray(el)]\r\n        } else {\r\n            result = [...result, el]\r\n        }\r\n    })\r\n    return result\r\n}\r\nfunction distributorObjectsInArray(arr) {\r\n    let result = []\r\n    let count = 1\r\n    for (var i = 0; i < arr.length; i++) {\r\n        if (!(i % 20)) {\r\n            if (i !== 0) {\r\n                count++\r\n            }\r\n            result[count] = []\r\n        }\r\n        result[count].push(arr[i])\r\n    }\r\n    return result\r\n}\r\nfunction sortMultiRaising(a, b) {\r\n    return ((a.title.length < b.title.length) ? -1 : ((a.title.length < b.title.length) ? 1 : 0));\r\n}\r\nfunction sortMultiDecrease(a, b) {\r\n    return ((a.title.length > b.title.length) ? -1 : ((a.title.length < b.title.length) ? 1 : 0));\r\n}\r\nconst postsReducer = (state = initialState, action) => {\r\n    let copyArray = [...state.posts];\r\n    switch (action.type) {\r\n        case SET_POSTS: {\r\n            let array = action.posts\r\n            return {\r\n                ...state,\r\n                posts: distributorObjectsInArray(array)\r\n            }\r\n        }\r\n        case SET_QUEUE: {\r\n            copyArray = flatArray(state.posts)\r\n\r\n            if (action.state) {\r\n                copyArray.sort(sortMultiRaising)\r\n            }\r\n            else {\r\n                copyArray.sort(sortMultiDecrease)\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: distributorObjectsInArray(copyArray)\r\n            }\r\n        }\r\n        case SET_FILTER: {\r\n            let string = action.string\r\n            copyArray = flatArray(state.posts)\r\n            copyArray = copyArray.filter(o => o.title.match(string))\r\n            return {\r\n                ...state,\r\n                filterPosts: distributorObjectsInArray(copyArray)\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setPosts: (posts) => ({\r\n        type: SET_POSTS,\r\n        posts\r\n    }),\r\n    setQueue: (state) => ({\r\n        type: SET_QUEUE,\r\n        state\r\n    }),\r\n    setFilter: (string) => ({\r\n        type: SET_FILTER,\r\n        string\r\n    }),\r\n    setCurrentPage: (currentPage) => ({\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    })\r\n}\r\nexport const getPosts = () => async (dispatch) => {\r\n    const posts = await PostsAPI.getPosts()\r\n    dispatch(actions.setPosts(posts))\r\n}\r\nexport default postsReducer","export const getPostsSel = (state) => {\r\n    return state.posts.posts\r\n}\r\nexport const getFilterPostsSel = (state) => {\r\n    return state.posts.filterPosts\r\n} \r\nexport const getCurrentPageSel = (state) => {\r\n    return state.posts.currentPage\r\n} ","import React, { useState } from 'react'\r\nimport './Paginator.css';\r\nimport cn from 'classnames'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actions } from '../redux/posts-reducer';\r\nimport { getCurrentPageSel } from '../selectors/postsSelectors';\r\n\r\n\r\nlet Paginator = ({ totalItemsCount,  portionSize = 20 }) => {\r\n    let pagesCount = Math.ceil(totalItemsCount - 1 / 1)\r\n    const dispatch = useDispatch()\r\n    const currentPage = useSelector(getCurrentPageSel)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n    const onPageChanged = (page) => {\r\n        dispatch(actions.setCurrentPage(page))\r\n    }\r\n    return <div className=\"paginator\">\r\n        {portionNumber > 1 &&\r\n            <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <a className=\r\n                    {cn({\r\n                        [\"selectedPage\"]:\r\n                            currentPage  === p \r\n                    },\r\n                        \"pageNumber\")}\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        onPageChanged(p)\r\n                    }}>{p}</a>\r\n            })\r\n        }\r\n        {portionCount > portionNumber && <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react'\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, getPosts } from './redux/posts-reducer';\nimport { useEffect, useState } from 'react';\nimport { getCurrentPageSel, getFilterPostsSel, getPostsSel } from './selectors/postsSelectors';\nimport Paginator from './common/Paginator';\n\nfunction App() {\n  console.log(\"Привет\")\n  const [count, setCount] = useState(0)\n  const [string, setString] = useState(\"\")\n  const dispatch = useDispatch()\n  const postsSel = useSelector(getPostsSel)\n  const filterPostsSel = useSelector(getFilterPostsSel)\n  const posts = filterPostsSel.length > 0 && string.length > 0 ? filterPostsSel : string.length === 0 ? postsSel : [];\n  const currentPage = useSelector(getCurrentPageSel)\n  const getPostsDis = () => {\n    dispatch(getPosts())\n  }\n  useEffect(() => {\n    getPostsDis()\n  }, [])\n  const changeInputFilter = (e) => {\n    e.preventDefault()\n    setString(e.target.value)\n    dispatch(actions.setFilter(e.target.value))\n    // dispatch.\n  }\n  const submitQueue = (e) => {\n    e.preventDefault()\n    if (count === 0) {\n      dispatch(actions.setQueue(false))\n      setCount(1)\n    } else if (count === 1) {\n      dispatch(actions.setQueue(true))\n      setCount(2)\n    }\n    else if (count === 2) {\n      dispatch(getPosts())\n      setCount(0)\n    }\n  }\n  console.log(posts)\n  return (\n    <div className=\"app\">\n      <label className=\"app__label\">\n        Filter:\n          <input className=\"app__input\" value={string} onChange={changeInputFilter}>\n        </input>\n      </label>\n      <div className=\"app__table\">\n        <table className=\"app__table-wrapp\" border=\"1\">\n          <caption className=\"app__caption\">Таблица</caption>\n          <thead className=\"app__names\">\n            <tr>\n              <th className=\"app__name\">Номер</th>\n              <th className=\"app__name\"><button onClick={submitQueue}>Столбец</button></th>\n            </tr>\n          </thead>\n          {posts.length > 0 ? posts[currentPage].map(p => (\n            <tbody key={p.id} className=\"app_raw\">\n              <tr>\n                <th className=\"app__id\">{p.id}</th>\n                <th className=\"app__title\">{p.title}</th>\n              </tr>\n            </tbody>\n          )) : null}\n        </table>\n      </div>\n      <Paginator totalItemsCount={posts.length} pageSize={20} />\n    </div >\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport postsReducer from './posts-reducer';\r\n\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    posts: postsReducer\r\n})\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}